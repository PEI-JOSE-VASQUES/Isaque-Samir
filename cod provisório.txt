#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET    -1  
#define I2C_ADDRESS   0x3C  

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


int ultimaHora = -1;
int ultimoDiaSemana = -1;
int ultimoDiaMes = -1;
int ultimoMes = -1;



const unsigned char logo [] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc1, 0xe0, 0x02, 0x10, 0x00, 
    0x00, 0x00, 0x03, 0xf1, 0xe0, 0x02, 0x10, 0x00, 0x00, 0x00, 0x0f, 0xf9, 0xe0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x1f, 0xfc, 0x60, 0x20, 0x01, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x20, 0x01, 0xe0, 0x00, 
    0x00, 0x00, 0xfe, 0x1f, 0x80, 0x07, 0xf8, 0x00, 0x00, 0x01, 0xf8, 0x8f, 0xe0, 0x0f, 0xfc, 0x00, 
    0x00, 0x07, 0xf1, 0xe7, 0xf0, 0x0f, 0xfc, 0x00, 0x00, 0x0f, 0xc7, 0xf1, 0xfc, 0x1f, 0xfe, 0x00, 
    0x00, 0x1f, 0x8f, 0xfc, 0xfc, 0x1f, 0xfe, 0x00, 0x00, 0x0f, 0x3f, 0xfe, 0x3c, 0x1f, 0xfe, 0x00, 
    0x00, 0x0c, 0x7f, 0xff, 0x98, 0x1f, 0xfe, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x1c, 0x1e, 0x00, 
    0x00, 0x03, 0xff, 0xff, 0xe0, 0x0d, 0x0c, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x0f, 0xfc, 0x00, 
    0x00, 0x03, 0xfc, 0x1f, 0xe0, 0x06, 0xf8, 0x00, 0x00, 0x03, 0xfc, 0x1f, 0xe0, 0x06, 0xd8, 0x00, 
    0x00, 0x03, 0xfc, 0x1f, 0xe0, 0x03, 0xd0, 0x00, 0x00, 0x03, 0xfc, 0x1f, 0xe0, 0x03, 0xf0, 0x00, 
    0x00, 0x03, 0xfc, 0x1f, 0xe0, 0x03, 0xf0, 0x00, 0x00, 0x03, 0xfc, 0x1f, 0xe0, 0x01, 0xe0, 0x00, 
    0x00, 0x03, 0xfc, 0x1f, 0xe0, 0x01, 0xe0, 0x00, 0x00, 0x03, 0xfc, 0x1f, 0xe0, 0x01, 0xe0, 0x00, 
    0x00, 0x03, 0xfc, 0x1f, 0xe0, 0x01, 0xe0, 0x00, 0x00, 0x03, 0xfc, 0x1f, 0xe0, 0x00, 0x60, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x30, 0xc1, 0x80, 0x0e, 0x00, 
    0x00, 0x0e, 0x00, 0x38, 0xe1, 0x80, 0x3e, 0x00, 0x00, 0x0f, 0x00, 0x38, 0xe1, 0x80, 0x3c, 0x00, 
    0x00, 0x0f, 0x80, 0x38, 0xe1, 0x80, 0x70, 0x00, 0x00, 0x0f, 0xc0, 0x38, 0xe1, 0x80, 0xe0, 0x00, 
    0x00, 0x0f, 0xe0, 0x30, 0xe1, 0x81, 0xe0, 0x00, 0x00, 0x0e, 0xf0, 0x38, 0xe1, 0x83, 0x80, 0x00, 
    0x00, 0x0e, 0x78, 0x38, 0xe1, 0x9f, 0x00, 0x00, 0x00, 0x0e, 0x3c, 0x38, 0xe1, 0x9f, 0x00, 0x00, 
    0x00, 0x0e, 0x1e, 0x38, 0xe1, 0x9f, 0x00, 0x00, 0x00, 0x0e, 0x0f, 0x38, 0xe1, 0x87, 0x80, 0x00, 
    0x00, 0x0e, 0x07, 0xf8, 0xe1, 0x83, 0xc0, 0x00, 0x00, 0x0e, 0x03, 0xf0, 0xe1, 0x81, 0xe0, 0x00, 
    0x00, 0x0e, 0x01, 0xf0, 0xe1, 0x80, 0xf0, 0x00, 0x00, 0x0e, 0x00, 0xf0, 0xe1, 0x80, 0x78, 0x00, 
    0x00, 0x0e, 0x00, 0x70, 0xe1, 0x80, 0x3c, 0x00, 0x00, 0x06, 0x00, 0x30, 0xe1, 0x80, 0x1e, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};





const unsigned char rede1 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xe0, 0x07, 0xff, 0x80, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x7f, 0xe0, 0x00, 
	0x00, 0x0f, 0xf0, 0x07, 0xc0, 0x0f, 0xf0, 0x00, 0x00, 0x3f, 0xc0, 0xff, 0xff, 0x03, 0xfc, 0x00, 
	0x00, 0x7f, 0x03, 0xff, 0xff, 0xc0, 0xfe, 0x00, 0x00, 0xfe, 0x0f, 0xff, 0xff, 0xf0, 0x7f, 0x00, 
	0x00, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0x00, 0x00, 0xf8, 0x7f, 0x80, 0x01, 0xfe, 0x1f, 0x00, 
	0x00, 0x30, 0xfe, 0x00, 0x00, 0x7f, 0x0c, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x1f, 0x80, 0x00, 
	0x00, 0x03, 0xf0, 0x3f, 0xfc, 0x0f, 0xc0, 0x00, 0x00, 0x07, 0xe1, 0xff, 0xff, 0x87, 0xe0, 0x00, 
	0x00, 0x07, 0xc3, 0xff, 0xff, 0xc3, 0xe0, 0x00, 0x00, 0x03, 0x8f, 0xff, 0xff, 0xf1, 0xc0, 0x00, 
	0x00, 0x00, 0x1f, 0xf0, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x01, 0xfc, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x7c, 0x00, 0x00, 
	0x00, 0x00, 0x18, 0x07, 0xf0, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};




const unsigned char rede2 [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
	0xff, 0xfe, 0x00, 0x1f, 0xf8, 0x00, 0x7f, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 0x80, 0x1f, 0xff, 
	0xff, 0xf0, 0x0f, 0xf8, 0x3f, 0xf0, 0x0f, 0xff, 0xff, 0xc0, 0x3f, 0x00, 0x00, 0xfc, 0x03, 0xff, 
	0xff, 0x80, 0xfc, 0x00, 0x00, 0x3f, 0x01, 0xff, 0xff, 0x01, 0xf0, 0x00, 0x00, 0x0f, 0x80, 0xff, 
	0xff, 0x03, 0xc0, 0x03, 0xc0, 0x03, 0xc0, 0xff, 0xff, 0x07, 0x80, 0x7f, 0xfe, 0x01, 0xe0, 0xff, 
	0xff, 0xcf, 0x01, 0xff, 0xff, 0x80, 0xf3, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xe0, 0x7f, 0xff, 
	0xff, 0xfc, 0x0f, 0xc0, 0x03, 0xf0, 0x3f, 0xff, 0xff, 0xf8, 0x1e, 0x00, 0x00, 0x78, 0x1f, 0xff, 
	0xff, 0xf8, 0x3c, 0x00, 0x00, 0x3c, 0x1f, 0xff, 0xff, 0xfc, 0x70, 0x00, 0x00, 0x0e, 0x3f, 0xff, 
	0xff, 0xff, 0xe0, 0x0f, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xfe, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0xff, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xff, 0x83, 0xff, 0xff, 
	0xff, 0xff, 0xe7, 0xf8, 0x0f, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};


const unsigned char ok [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xc0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x70, 0x00, 0x00, 
	0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x0c, 0x00, 0x00, 
	0x00, 0x00, 0xe0, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x03, 0x00, 0x00, 
	0x00, 0x01, 0x80, 0x00, 0x00, 0xc1, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x81, 0x80, 0x00, 
	0x00, 0x03, 0x00, 0x80, 0x07, 0x00, 0xc0, 0x00, 0x00, 0x03, 0x01, 0xe0, 0x0e, 0x00, 0xc0, 0x00, 
	0x00, 0x06, 0x01, 0xe0, 0x1f, 0xe0, 0x60, 0x00, 0x00, 0x06, 0x00, 0xc0, 0x00, 0x00, 0x60, 0x00, 
	0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 
	0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 
	0x00, 0x03, 0x00, 0x60, 0x0e, 0x00, 0xc0, 0x00, 0x00, 0x01, 0x80, 0x3f, 0xf8, 0x01, 0x80, 0x00, 
	0x00, 0x00, 0xc0, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x07, 0x00, 0x00, 
	0x00, 0x00, 0x70, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 
	0x00, 0x00, 0x0e, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x03, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};




const unsigned char liberado [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0x07, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0x07, 0xff, 0xff, 
	0xff, 0xff, 0xc3, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xe1, 0xff, 0xff, 
	0xff, 0xff, 0x0f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xf8, 0x7f, 0xff, 
	0xff, 0xfe, 0x1f, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xfc, 0x7f, 0xff, 
	0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 
	0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 
	0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 
	0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 
	0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 
	0xff, 0x0f, 0xff, 0xfc, 0x3f, 0xff, 0xf0, 0xff, 0xff, 0x0f, 0xff, 0xf8, 0x1f, 0xff, 0xf0, 0xff, 
	0xff, 0x0f, 0xff, 0xf0, 0x0f, 0xff, 0xf0, 0xff, 0xff, 0x0f, 0xff, 0xf0, 0x0f, 0xff, 0xf0, 0xff, 
	0xff, 0x0f, 0xff, 0xf8, 0x1f, 0xff, 0xf0, 0xff, 0xff, 0x0f, 0xff, 0xfc, 0x3f, 0xff, 0xf0, 0xff, 
	0xff, 0x0f, 0xff, 0xfc, 0x3f, 0xff, 0xf0, 0xff, 0xff, 0x0f, 0xff, 0xfc, 0x3f, 0xff, 0xf0, 0xff, 
	0xff, 0x0f, 0xff, 0xfc, 0x3f, 0xff, 0xf0, 0xff, 0xff, 0x0f, 0xff, 0xfc, 0x3f, 0xff, 0xf0, 0xff, 
	0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 
	0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 
	0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 
	0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};



const unsigned char bloqueio [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x01, 0xff, 0x0f, 0xff, 
	0xff, 0xff, 0xfe, 0x00, 0x07, 0xf8, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xe0, 0x00, 0x7f, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xf8, 0x1f, 0xff, 0xff, 0xfc, 0x7f, 0xe3, 0x07, 0xfe, 0x0f, 
	0xff, 0xff, 0xf8, 0x1f, 0x80, 0x0f, 0xff, 0x0f, 0xff, 0xff, 0xc0, 0x0f, 0x00, 0x1f, 0x0f, 0x87, 
	0xff, 0xfe, 0x00, 0x06, 0x00, 0x1e, 0x03, 0xc7, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x3c, 0x03, 0xc3, 
	0xff, 0xe0, 0x00, 0x00, 0x00, 0x3c, 0x03, 0xc1, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x3c, 0x03, 0xc0, 
	0xff, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xff, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0, 
	0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0, 
	0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0x8f, 0xf0, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0xff, 0x0f, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0x8f, 0xf0, 
	0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0x9f, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0x9f, 0xf0, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x80, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0, 
	0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};



#include <Arduino.h>
#include <HardwareSerial.h>
#include <DFRobotDFPlayerMini.h>


#define DFPLAYER_RX 4  
#define DFPLAYER_TX 2 



HardwareSerial mySerial(2);
DFRobotDFPlayerMini player;





#include <WiFi.h>         
#include <IOXhop_FirebaseESP32.h>                           
#include <ArduinoJson.h>                   

#define WIFI_SSID "iPhone de Isaque"                   
#define WIFI_PASSWORD "12345678"         
#define FIREBASE_HOST "https://banco-de-dados-e77eb-default-rtdb.firebaseio.com/"    
#define FIREBASE_AUTH "uOJCWcD1Ap4cgNoPjlMByBGZ1VKQWB3o9sqjcRQ7"   





#define PCF8575_ADDR 0x27  

uint16_t estadoPortas = 0xFFFF;




#include <SPI.h>
#include <MFRC522.h>

#define SS_PIN 12      
#define RST_PIN 25     
#define SCK_PIN 27     
#define MOSI_PIN 13    
#define MISO_PIN 32   

MFRC522 mfrc522(SS_PIN, RST_PIN); 




const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = -10800; 
const int   daylightOffset_sec = 0; 




#include <Adafruit_ADS1X15.h>
#include <math.h>

Adafruit_ADS1115 ads1;
Adafruit_ADS1115 ads2;  
Adafruit_ADS1115 ads3;  


#define SENSIBILIDADE 0.100


#define V_REF 2.5  


#define RESOLUCAO (4.096 / 32768.0) 

#define NUM_AMOSTRAS 100




void setup() {
    Wire.begin(21, 22);
    Serial.begin(115200);
   


   pinMode(16,OUTPUT);
   pinMode(17,OUTPUT);
   pinMode(18,OUTPUT);
   pinMode(19,OUTPUT);


  
    SPI.begin(SCK_PIN, MISO_PIN, MOSI_PIN, SS_PIN);
    
    
    mfrc522.PCD_Init();
    Serial.println("Aproxime um cartão RFID...");



    if (!display.begin(SSD1306_SWITCHCAPVCC, I2C_ADDRESS)) {
        Serial.println(F("Falha ao iniciar o display SSD1306"));
        for (;;);
    }

    display.clearDisplay();
    display.setTextSize(1);             
    display.setTextColor(SSD1306_WHITE); 
    display.setCursor(0, 0);            
display.println("NIK: Oi Anderson Cruz");
    display.drawBitmap(32, 16, logo, 64, 50, SSD1306_WHITE); 
    display.display();







 mySerial.begin(9600, SERIAL_8N1, DFPLAYER_RX, DFPLAYER_TX); 

    Serial.println("Iniciando DFPlayer Mini...");
    
    if (!player.begin(mySerial)) {  
        Serial.println("Erro: DFPlayer Mini não encontrado!");
        while (true); 
    }

    Serial.println("DFPlayer Mini pronto!");
    player.volume(30);
    

               delay(3000); 
    Serial.println("Aguardando comandos...");

       player.play(6); 
 delay(8000); 






Serial.println();

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  
  Serial.print("Conectando ao wifi");
  player.play(1);
      display.clearDisplay();
    display.setTextSize(1);             
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);            
display.println("Conectando no wifi...");
      display.drawBitmap(32, 16, rede1, 64, 50, SSD1306_WHITE); 
    display.display();
  delay(6000);
  while (WiFi.status() != WL_CONNECTED)
  {


    cartao();

    ligaRele(14);
    ligaRele(15);


display.clearDisplay();
    display.setTextSize(1);             
    display.setTextColor(SSD1306_WHITE); 
    display.setCursor(0, 0);            
display.println("Conectando no wifi...");
      display.drawBitmap(32, 16, rede2, 64, 50, SSD1306_WHITE); 
    display.display();

    Serial.print(".");
    delay(300);

    cartao();

display.clearDisplay();
    display.setTextSize(1);             
    display.setTextColor(SSD1306_WHITE); 
    display.setCursor(0, 0);           
display.println("Conectando no wifi...");
      display.drawBitmap(32, 16, rede1, 64, 50, SSD1306_WHITE); 
    display.display();

    desligaRele(14);
    desligaRele(15);
        delay(300);


  }
    player.play(7);
    display.clearDisplay();
    display.setTextSize(1);           
    display.setTextColor(SSD1306_WHITE); 
    display.setCursor(0, 0);            
display.println("Conectado na rede");
      display.drawBitmap(32, 16, ok, 64, 50, SSD1306_WHITE); 
    display.display();

    Serial.print(".");
    delay(300);
    delay(200);
      ligaRele(14);
          desligaRele(15);
delay(3000);
    desligaRele(14);
      


   configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);





  Serial.println("Conexão realizada");
  Serial.println();

  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);







    
    if (!ads1.begin(0x48)) Serial.println("Falha ao iniciar ADS1115 (0x48)");
    if (!ads2.begin(0x4A)) Serial.println("Falha ao iniciar ADS1115 (0x49)");
    if (!ads3.begin(0x4B)) Serial.println("Falha ao iniciar ADS1115 (0x4A)");
    
    ads1.setGain(GAIN_ONE);
    ads2.setGain(GAIN_ONE);
    ads3.setGain(GAIN_ONE);




}

String basePath = "/clientes/34789236/geral/conta_a_hora/";


void atualizarFirebase(int sensor1, int sensor2, int sensor3, int sensor4, int sensor5, 
                        int sensor6, int sensor7, int sensor8, int sensor9, int sensor10) {
    int novoTotal;

    if (Firebase.getInt(basePath + "sensor1")) {
        novoTotal = Firebase.getInt(basePath + "sensor1") + sensor1;
    } else {
        novoTotal = sensor1;
    }
    Firebase.setInt(basePath + "sensor1", novoTotal);

    if (Firebase.getInt(basePath + "sensor2")) {
        novoTotal = Firebase.getInt(basePath + "sensor2") + sensor2;
    } else {
        novoTotal = sensor2;
    }
    Firebase.setInt(basePath + "sensor2", novoTotal);

    if (Firebase.getInt(basePath + "sensor3")) {
        novoTotal = Firebase.getInt(basePath + "sensor3") + sensor3;
    } else {
        novoTotal = sensor3;
    }
    Firebase.setInt(basePath + "sensor3", novoTotal);

    if (Firebase.getInt(basePath + "sensor4")) {
        novoTotal = Firebase.getInt(basePath + "sensor4") + sensor4;
    } else {
        novoTotal = sensor4;
    }
    Firebase.setInt(basePath + "sensor4", novoTotal);

    if (Firebase.getInt(basePath + "sensor5")) {
        novoTotal = Firebase.getInt(basePath + "sensor5") + sensor5;
    } else {
        novoTotal = sensor5;
    }
    Firebase.setInt(basePath + "sensor5", novoTotal);

    if (Firebase.getInt(basePath + "sensor6")) {
        novoTotal = Firebase.getInt(basePath + "sensor6") + sensor6;
    } else {
        novoTotal = sensor6;
    }
    Firebase.setInt(basePath + "sensor6", novoTotal);

    if (Firebase.getInt(basePath + "sensor7")) {
        novoTotal = Firebase.getInt(basePath + "sensor7") + sensor7;
    } else {
        novoTotal = sensor7;
    }
    Firebase.setInt(basePath + "sensor7", novoTotal);

    if (Firebase.getInt(basePath + "sensor8")) {
        novoTotal = Firebase.getInt(basePath + "sensor8") + sensor8;
    } else {
        novoTotal = sensor8;
    }
    Firebase.setInt(basePath + "sensor8", novoTotal);

    if (Firebase.getInt(basePath + "sensor9")) {
        novoTotal = Firebase.getInt(basePath + "sensor9") + sensor9;
    } else {
        novoTotal = sensor9;
    }
    Firebase.setInt(basePath + "sensor9", novoTotal);

    if (Firebase.getInt(basePath + "sensor10")) {
        novoTotal = Firebase.getInt(basePath + "sensor10") + sensor10;
    } else {
        novoTotal = sensor10;
    }
    Firebase.setInt(basePath + "sensor10", novoTotal);
}

void loop() {
      cartao();

    struct tm timeinfo;
    if (!getLocalTime(&timeinfo)) {
        Serial.println("Falha ao obter o tempo");
        return;
    }
    
    int ano = timeinfo.tm_year + 1900;
    int mes = timeinfo.tm_mon + 1;
    int dia = timeinfo.tm_mday;
    int hora = timeinfo.tm_hour;
    int minuto = timeinfo.tm_min;
    int segundo = timeinfo.tm_sec;
    int diaSemana = timeinfo.tm_wday;

    int sensor1 = calcularCorrenteRMS(ads1, 0);
    int sensor2 = calcularCorrenteRMS(ads1, 1);
    int sensor3 = calcularCorrenteRMS(ads1, 2);
    int sensor4 = calcularCorrenteRMS(ads1, 3);
    int sensor5 = calcularCorrenteRMS(ads2, 0);
    int sensor6 = calcularCorrenteRMS(ads2, 1);
    int sensor7 = calcularCorrenteRMS(ads2, 2);
    int sensor8 = calcularCorrenteRMS(ads2, 3);
    int sensor9 = calcularCorrenteRMS(ads3, 0);
    int sensor10 = calcularCorrenteRMS(ads3, 1);

    if (hora != ultimaHora && minuto == 0) {
        Serial.printf("%02d:%02d\n", hora, minuto);
        ultimaHora = hora;
        
        String path = "/clientes/34789236/geral/24_horas/" + String(ultimaHora) + "h";
        float res = sensor1 + sensor2 + sensor3 + sensor4 + sensor5 + 
                    sensor6 + sensor7 + sensor8 + sensor9 + sensor10;
        Firebase.setFloat(path, res);

        // Chama a função para atualizar o Firebase
        atualizarFirebase(sensor1, sensor2, sensor3, sensor4, sensor5, 
                          sensor6, sensor7, sensor8, sensor9, sensor10);
    }

    Serial.printf("Ano: %d\n", ano);
    Serial.printf("Mês: %d\n", mes);
    Serial.printf("Dia: %d\n", dia);
    Serial.printf("Hora: %02d\n", hora);
    Serial.printf("Minuto: %02d\n", minuto);
    Serial.printf("Segundo: %02d\n", segundo);
    Serial.printf("Dia da semana: %d\n", diaSemana);

    Serial.println("Leitura dos sensores ACS712:");
    Serial.print("Sensor 1: "); Serial.println(sensor1);
    Serial.print("Sensor 2: "); Serial.println(sensor2);
    Serial.print("Sensor 3: "); Serial.println(sensor3);
    Serial.print("Sensor 4: "); Serial.println(sensor4);
    Serial.print("Sensor 5: "); Serial.println(sensor5);
    Serial.print("Sensor 6: "); Serial.println(sensor6);
    Serial.print("Sensor 7: "); Serial.println(sensor7);
    Serial.print("Sensor 8: "); Serial.println(sensor8);
    Serial.print("Sensor 9: "); Serial.println(sensor9);
    Serial.print("Sensor 10: "); Serial.println(sensor10);
    Serial.println("----------------------");

}







void ligaRele(int numeroRele) {
    estadoPortas &= ~(1 << numeroRele);  
    enviarComando(estadoPortas);
    Serial.print("Relé ");
    Serial.print(numeroRele);
    Serial.println(" ligado!");
}

void desligaRele(int numeroRele) {
    estadoPortas |= (1 << numeroRele);  
    enviarComando(estadoPortas);
    Serial.print("Relé ");
    Serial.print(numeroRele);
    Serial.println(" desligado!");
}

void enviarComando(uint16_t estado) {
    Wire.beginTransmission(PCF8575_ADDR);
    Wire.write(estado & 0xFF);       
    Wire.write((estado >> 8) & 0xFF); 
    Wire.endTransmission();
}



void cartao() {
    if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) return;

    
    if (mfrc522.uid.size == 4 &&
        mfrc522.uid.uidByte[0] == 0x23 &&
        mfrc522.uid.uidByte[1] == 0x27 &&
        mfrc522.uid.uidByte[2] == 0x1C &&
        mfrc522.uid.uidByte[3] == 0xF7) {
        
        Serial.println("O cartão de Isaque foi encontrado");
   player.play(3);
              ligaRele(14);
              desligaRele(15);



    display.clearDisplay();
    display.setTextSize(1);             
    display.setTextColor(SSD1306_WHITE); 
    display.setCursor(0, 0);          
display.println("!!!Risco de choque!!!");
    display.drawBitmap(32, 16, liberado, 64, 50, SSD1306_WHITE); 
    display.display();





        delay(7040);
digitalWrite(16,1);
digitalWrite(18,1);
///////////////////
digitalWrite(17,0);
digitalWrite(19,0);
delay(50);
digitalWrite(16,0);
digitalWrite(18,0);
    }     



    else if (mfrc522.uid.size == 4 &&
             mfrc522.uid.uidByte[0] == 0x08 &&
             mfrc522.uid.uidByte[1] == 0xF1 &&
             mfrc522.uid.uidByte[2] == 0xE8 &&
             mfrc522.uid.uidByte[3] == 0x2A) {
        
        Serial.println("O segundo cartão foi encontrado");
    
       player.play(3);
              ligaRele(14);
              desligaRele(15);



    display.clearDisplay();
    display.setTextSize(1);           
    display.setTextColor(SSD1306_WHITE); 
    display.setCursor(0, 0);           
display.println("!!!Risco de choque!!!");
    display.drawBitmap(32, 16, liberado, 64, 50, SSD1306_WHITE); 
    display.display();





        delay(7040);
digitalWrite(16,1);
digitalWrite(18,1);
///////////////////
digitalWrite(17,0);
digitalWrite(19,0);
delay(50);
digitalWrite(16,0);
digitalWrite(18,0);
    }





    else{
         player.play(2);
              ligaRele(15);
              desligaRele(14);
    display.clearDisplay();
    display.setTextSize(1);            
    display.setTextColor(SSD1306_WHITE); 
    display.setCursor(0, 0);            
display.println("!Contato recusado!");
    display.drawBitmap(32, 16, bloqueio, 64, 50, SSD1306_WHITE);
    display.display();

        delay(8000);
    }
     desligaRele(15);
     desligaRele(14);


    mfrc522.PICC_HaltA(); 
}






int calcularCorrenteRMS(Adafruit_ADS1115 &ads, int canal) {
    float somaQuadrados = 0;
    for (int i = 0; i < NUM_AMOSTRAS; i++) {
        int16_t leitura = ads.readADC_SingleEnded(canal);
        float tensao = leitura * RESOLUCAO;  
        float corrente = (tensao - V_REF) / SENSIBILIDADE; 
        somaQuadrados += pow(corrente, 2);
    }
    float correnteRMS = sqrt(somaQuadrados / NUM_AMOSTRAS);
    return (correnteRMS < 0) ? 0 : (int)correnteRMS;
}
